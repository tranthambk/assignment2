Program([FuncDecl(Id(F),[VarDecl(x,FloatType),VarDecl(n,IntType)],FloatType,Block([VarDecl(a,IntType),VarDecl(i,IntType),If(BinaryOp(==,BinaryOp(%,Id(n),IntLiteral(2)),IntLiteral(0)),BinaryOp(=,Id(a),IntLiteral(1)),BinaryOp(=,Id(a),UnaryOp(-,IntLiteral(1)))),VarDecl(temp,FloatType),BinaryOp(=,Id(temp),IntLiteral(1)),For(BinaryOp(=,Id(i),IntLiteral(1));BinaryOp(<=,Id(i),BinaryOp(+,BinaryOp(*,IntLiteral(2),Id(n)),IntLiteral(1)));BinaryOp(=,Id(i),BinaryOp(+,Id(i),IntLiteral(1)));BinaryOp(=,Id(temp),BinaryOp(/,BinaryOp(*,Id(temp),Id(x)),Id(i)))),Return(BinaryOp(*,Id(a),Id(temp)))])),FuncDecl(Id(main),[],IntType,Block([VarDecl(x,FloatType),VarDecl(sin,FloatType),BinaryOp(=,Id(sin),IntLiteral(0)),CallExpr(Id(print),[StringLiteral(Nhap gia tri sin can tinh(radian): )]),CallExpr(Id(scan),[Id(x)]),VarDecl(n,IntType),BinaryOp(=,Id(n),IntLiteral(0)),Dowhile([Block([BinaryOp(=,Id(sin),BinaryOp(+,Id(sin),CallExpr(Id(F),[Id(x),Id(n)]))),BinaryOp(=,Id(n),BinaryOp(+,Id(n),IntLiteral(1)))])],BinaryOp(>,CallExpr(Id(abs),[CallExpr(Id(F),[Id(x),Id(n)])]),FloatLiteral(1e-05))),CallExpr(Id(print),[StringLiteral(Gia tri can tinh: ),Id(sin)]),Return(IntLiteral(0))]))])